from langchain_community.document_loaders import PyPDFLoader  # Used to load PDF documents
from langchain.text_splitter import CharacterTextSplitter  # Splits text into chunks by character count
from langchain.text_splitter import RecursiveCharacterTextSplitter  # Splits text recursively for better granularity

# Load the PDF file "my_linux.pdf"
loader = PyPDFLoader("my_linux.pdf")

# Load the PDF and split it into pages
pages = loader.load_and_split()

# Define a text splitter that splits text into chunks of 200 characters with 20-character overlap
character_text_splitter = CharacterTextSplitter(
    chunk_size=200,  # Each chunk will have 200 characters
    chunk_overlap=20  # Overlapping of 20 characters between chunks for continuity
)

# Define a recursive text splitter with a smaller chunk size
recursive_text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=50,  # Each chunk will have 50 characters
    chunk_overlap=10,  # Overlapping of 10 characters for better context preservation
    length_function=len,  # Function used to measure text length (here, it simply uses `len()`)
)

# Apply the character-based text splitter on the loaded pages
character_docs = character_text_splitter.split_documents(pages)

# Apply the recursive text splitter on the loaded pages
recursive_docs = recursive_text_splitter.split_documents(pages)

# Print the number of documents created by the recursive text splitter
print(f"You have {len(recursive_docs)} documents.")  # Expected output: Number of chunks created by recursive splitter (e.g., 244)

# Print the content of each document generated by the recursive text splitter
for recursive_doc in recursive_docs:
    print(recursive_doc.page_content)

# Print the first document chunk from the character text splitter
print(character_docs[0])

# Print the total number of documents created using character-based splitting
print(f"You have {len(character_docs)} documents.")  # Expected output: Number of chunks created by character-based splitter (e.g., 60)

# Print a preview of the first chunk of text from character-based splitting
print("Preview:")
print(character_docs[0].page_content)

# Additional explanation:
# The number of chunks depends on the total text length extracted from the PDF.
# Since RecursiveCharacterTextSplitter splits text into 50-character chunks with a 10-character overlap,
# if the extracted text is long, it results in a higher number of chunks.
# Example: If the text is 12,000 characters long, it would result in approximately 300 chunks.
# The final number of chunks (e.g., 244) depends on the actual text length in the PDF.

# The same applies to CharacterTextSplitter:
# Since CharacterTextSplitter splits text into 200-character chunks with a 20-character overlap,
# if the extracted text is long, it results in fewer chunks compared to the recursive splitter.
# Example: If the text is 12,000 characters long, it would result in approximately 60 chunks.
# The final number of chunks (e.g., 60) depends on the actual text length in the PDF.
